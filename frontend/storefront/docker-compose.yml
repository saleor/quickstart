version: '3.8'

services:
  storefront:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - NEXT_PUBLIC_SALEOR_API_URL=${NEXT_PUBLIC_SALEOR_API_URL:-http://localhost:8000/graphql/}
        - NEXT_PUBLIC_STOREFRONT_URL=${NEXT_PUBLIC_STOREFRONT_URL:-http://localhost:3000}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SALEOR_API_URL=${NEXT_PUBLIC_SALEOR_API_URL:-http://localhost:8000/graphql/}
      - NEXT_PUBLIC_STOREFRONT_URL=${NEXT_PUBLIC_STOREFRONT_URL:-http://localhost:3000}
      # AWS specific environment variables
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - AWS_LOG_GROUP=${AWS_LOG_GROUP:-/ecs/saleor-storefront}
    logging:
      driver: "awslogs"
      options:
        awslogs-region: ${AWS_REGION:-us-east-1}
        awslogs-group: ${AWS_LOG_GROUP:-/ecs/saleor-storefront}
        awslogs-stream-prefix: ecs
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - saleor-network

  haproxy:
    image: haproxy:2.8-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - certbot-conf:/etc/letsencrypt:ro
    depends_on:
      - storefront
    networks:
      - saleor-network
    restart: unless-stopped

  certbot:
    image: certbot/certbot
    volumes:
      - certbot-www:/var/www/certbot
      - certbot-conf:/etc/letsencrypt
    command: certonly --standalone --email ${SSL_EMAIL:-admin@gltz.online} --agree-tos --no-eff-email -d ${DOMAIN:-gltz.online}
    ports:
      - "80:80"
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

networks:
  saleor-network:
    name: saleor-network
    driver: bridge

volumes:
  certbot-www:
  certbot-conf: